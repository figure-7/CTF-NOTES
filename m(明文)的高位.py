from Crypto.Util.number import *
from secret import *
flag_part = flag_content + '#' + secret_token
p = getPrime(512)
q = getPrime(512)

m = bytes_to_long(flag_part.encode())

e = 5
n = p*q

c = pow(m,e,n)

print('n =', n)
print('c =', c)
print('flag_part =', flag_part)
print()
print('--- hint begin ---')
print('flag = "flag{" + flag_part + "}"')
print('type of secret_token is', type(secret_token))
print('length of secret_token is', len(secret_token))

# n = 131889193322687215946601811511407251196213571687093913054335139712633125177496800529685285401802802683116451016274353008428347997732857844896393358010946452397522017632024075459908859131965234835870443110233375074265933004741459359128684375786221535003839961829770182916778717973782408036072622166388614214899
# c = 11188201757361363141578235564807411583085091933389381887827791551369738717117549969067660372214366275040055647621817803877495473068767571465521881010707873686036336475554105314475193676388608812872218943728455841652208711802376453034141883236142677345880594246879967378770573385522326039206400578260353074379
# flag_part = sm4ll_r00ts_is_brilliant#◼️◼️◼️◼️◼️◼️◼️◼️
# 
# --- hint begin ---
# flag = "flag{" + flag_part + "}"
# type of secret_token is <class 'str'>
# length of secret_token is 8





#answer
from Crypto.Util.number import *
import libnum
a = b'sm4ll_r00ts_is_brilliant#'
print(hex(bytes_to_long(a)))
#0x736d346c6c5f72303074735f69735f6272696c6c69616e7423
#sage
n = 0xbbd1029486aff02a6a7d7664b1a9d08b637047812ed6f8a2218efd39b1d0edb1aca6eee79d95db41176ea5feb58f6a7e11a383e0de8c63ba008ed36b27e42f4f8c2decd8c9510a9cae09f3785050343f50d4e8f0d7e270f53aff09ece2abc806163273cbc48257c23d14217051e352c0ee30c415520ec1b76546071fa329b4f3
e = 5
high_m = 0x736d346c6c5f72303074735f69735f6272696c6c69616e74230000000000000000
c = 0xfeeba2a68d1b611aec7392a1b309857c706a3f65b306fdb6da0208f50fc275ac7c839cd39f4a163438ab837e45d61b5f220db94cc5e13325f01faa73d435da4b3967b20014aba07c031871d65193b029ab1e4170417b090efa7c6982713f2f0dd55a5ba6e0c2917da82206ebcd465030de0b056f7629abad9086a1c23eec4cb
R.<x> = PolynomialRing(Zmod(n), implementation='NTL')
m = high_m + x
M = m((m^5 - c).small_roots()[0])
print(hex(int(M))[2:])
#736d346c6c5f72303074735f69735f6272696c6c69616e74236363306461633732
c = 0x736d346c6c5f72303074735f69735f6272696c6c69616e74236363306461633732
print(long_to_bytes(int(c)))
