[+]Generating challenge 5
[+]n= 11360482956346035775672222984930993273153457696615552027717186244244535440491088235828783275702469365207521120463567930977762058681401489454489342498881876642508966767231164558652877636004795684396190135279263190885938880109010818834434261958066137775818039173477169480399149316441264414880522952991106957806
[+]e=7
[+]m=random.getrandbits(512)
[+]c=pow(m,e,n)=112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021533447981943498594790549326550460216939216988828130624120379925895123186121819609415184887470233938291227816332249857236198616538782622327476603338806349004620909717360739157545735826670038169284252348037995399308
[+]x=pow(m+1,e,n)=112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021552486915464025361447529153776277710423467951041523831865232164370127602772602643378592695459331174613894578701940837730590029577336924367384969935652616989527416027725713616493815764725131271563545176286794438175
[-]long_to_bytes(m).encode('hex')=





#!python3 解密脚本
# -- coding utf-8 --
# @Time  20201031 2324
# @Author  A.James
# @FileName tt5.py
def short_pad_attack(c1, c2, e, n)
    PRxy.x,y = PolynomialRing(Zmod(n))
    PRx.xn = PolynomialRing(Zmod(n))
    PRZZ.xz,yz = PolynomialRing(Zmod(n))

    g1 = x^e - c1
    g2 = (x+y)^e - c2

    q1 = g1.change_ring(PRZZ)
    q2 = g2.change_ring(PRZZ)

    h = q2.resultant(q1)
    h = h.univariate_polynomial()
    h = h.change_ring(PRx).subs(y=xn)
    h = h.monic()

    kbits = n.nbits()(2ee)
    diff = h.small_roots(X=2^kbits, beta=0.5)[0]  # find root  2^kbits with factor = n^0.5

    return diff

def related_message_attack(c1, c2, diff, e, n)
    PRx.x = PolynomialRing(Zmod(n))
    g1 = x^e - c1
    g2 = (x+diff)^e - c2

    def gcd(g1, g2)
        while g2
            g1, g2 = g2, g1 % g2
        return g1.monic()

    return -gcd(g1, g2)[0]


if __name__ == '__main__'
    n = 113604829563460357756722229849309932731534576966155520277171862442445354404910882358287832757024693652075211204635679309777620586814014894544893424988818766425089667672311645586528776360047956843961901352792631908859388801090108188344342619580661377758180391734771694803991493164412644148805229529911069578061
    e = 7

    # nbits = n.nbits()
    # kbits = nbits(2ee)
    # print (upper %d bits (of %d bits) is same % (nbits-kbits, nbits))

    # ^^ = bit-wise XOR
    # httpdoc.sagemath.orghtmlenfaqfaq-usage.html#how-do-i-use-the-bitwise-xor-operator-in-sage
    # m1 = randrange(2^nbits)
    # m2 = m1 ^^ randrange(2^kbits)
    # c1 = pow(m1, e, n)
    # c2 = pow(m2, e, n)
    c1 = 16404985139084147094704300764850430964980485772400565266054075398380588297033201409914512724255440373095027298869259036450071617770755361938461322132693877590521575670718076480353565935028734363256919872879837455527948173237810119579078252909879868459848240229599708133153841801633280283847680255816123323196
    c2 = 92463268823628386526871956385934776043432833035349654252757452728405540022093349560058649691620353528569690982904353035470935543182784600771655097406007508218346417446808306197613168219068573563402315939576563452451487014381380516422829248470476887447827532913133023890886210295009811931573875721299817276803

    diff = short_pad_attack(c1, c2, e, n)
    print (difference of two messages is %d % diff)

    #print (m1)
    m1 = related_message_attack(c1, c2, diff, e, n)
    print (m1)
    #print (m2)
    print (m1 + diff)
